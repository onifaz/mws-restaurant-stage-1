{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","mainmap","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","updateRestaurants","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","addMarkersToMap","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","li","article","setAttribute","div","image","className","src","imageUrlForRestaurant","name","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants, neighborhoods, cuisines, mainmap;\nvar markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n  fetchNeighborhoods();\n  fetchCuisines();\n  updateRestaurants();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) {\n      // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.mainmap = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  //updateRestaurants();\n  if (typeof google === 'object' && typeof google.maps === 'object')\n    addMarkersToMap();\n};\n\n/**\n * Update page and map for current restaurants.\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    (error, restaurants) => {\n      if (error) {\n        // Got an error!\n        console.error(error);\n      } else {\n        resetRestaurants(restaurants);\n        fillRestaurantsHTML();\n      }\n    }\n  );\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nresetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  if (typeof google === 'object' && typeof google.maps === 'object')\n    addMarkersToMap();\n};\n\n/**\n * Create restaurant HTML.\n */\ncreateRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n  const article = document.createElement('article');\n  article.setAttribute('role', 'article');\n  const div = document.createElement('div');\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.setAttribute('alt', 'Photo of ' + restaurant.name + ' restaurant');\n  article.append(image);\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  div.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  neighborhood.setAttribute('class', 'neighborhood');\n  div.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  address.setAttribute('class', 'address');\n  div.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute(\n    'aria-label',\n    'View Details for ' + restaurant.name + ' restaurant'\n  );\n  more.href = DBHelper.urlForRestaurant(restaurant);\n\n  div.append(more);\n  article.append(div);\n  li.append(article);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  if (restaurants)\n    // Added because sometimes gmap is faster than resta server\n    restaurants.forEach(restaurant => {\n      // Add marker to the map\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.mainmap);\n      google.maps.event.addListener(marker, 'click', () => {\n        window.location.href = marker.url;\n      });\n      if (self.markers) self.markers.push(marker);\n    });\n};\n"]}