{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","mainmap","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","updateRestaurants","lazyload","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","addMarkersToMap","addGmapMain","setAttribute","script","src","type","body","appendChild","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","li","article","div","image","imageUrlForRestaurants","name","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants, neighborhoods, cuisines, mainmap;\nvar markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n  fetchNeighborhoods();\n  fetchCuisines();\n  updateRestaurants();\n  lazyload();\n\n  // Alternative to SW Background SYNC\n  // if (navigator.onLine) {\n  //   DBHelper.syncAllData();\n  // }\n  // window.addEventListener('online', function() {\n  //   DBHelper.syncAllData();\n  // });\n  // window.addEventListener('offline', function() {\n  //   console.info('It seems we are offline at the moment...');\n  // });\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) {\n      // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.mainmap = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  //updateRestaurants();\n  if (typeof google === 'object' && typeof google.maps === 'object')\n    addMarkersToMap();\n};\n\n/**\n * Add google map only on request of interactivity\n */\naddGmapMain = () => {\n  document\n    .getElementById('map-container')\n    .setAttribute('class', 'map--requested');\n  const script = document.createElement('script');\n  script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBN-_N7NAK_k8QKsoHe6pd4M8aIhA1HX6E&libraries=places&callback=initMap`;\n  script.type = 'text/javascript';\n  document.body.appendChild(script);\n};\n\n/**\n * Update page and map for current restaurants.\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    (error, restaurants) => {\n      if (error) {\n        // Got an error!\n        console.error(error);\n      } else {\n        resetRestaurants(restaurants);\n        fillRestaurantsHTML();\n        lazyload();\n      }\n    }\n  );\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nresetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  if (typeof google === 'object' && typeof google.maps === 'object')\n    addMarkersToMap();\n};\n\n/**\n * Create restaurant HTML.\n */\ncreateRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n  const article = document.createElement('article');\n  article.setAttribute('role', 'article');\n  const div = document.createElement('div');\n  div.setAttribute('class', 'rest-info');\n\n  const image = DBHelper.imageUrlForRestaurants(restaurant);\n  article.append(image);\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  div.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  neighborhood.setAttribute('class', 'neighborhood');\n  div.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  address.setAttribute('class', 'address');\n  div.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute(\n    'aria-label',\n    'View Details for ' + restaurant.name + ' restaurant'\n  );\n  more.href = DBHelper.urlForRestaurant(restaurant);\n\n  div.append(more);\n  article.append(div);\n  li.append(article);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  if (restaurants)\n    // Added because sometimes gmap is faster than resta server\n    restaurants.forEach(restaurant => {\n      // Add marker to the map\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.mainmap);\n      google.maps.event.addListener(marker, 'click', () => {\n        window.location.href = marker.url;\n      });\n      if (self.markers) self.markers.push(marker);\n    });\n};\n"]}